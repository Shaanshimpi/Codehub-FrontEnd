{
  "id": "python-variables-tutorial",
  "title": "Understanding Variables in Python",
  "description": "This tutorial introduces Python variables, their types, and how to use them effectively. It includes foundational concepts, interactive exercises, and practical examples to solidify understanding.",
  "learningObjectives": [
    "Understand what variables are and why they are used in Python",
    "Learn how to assign values to variables and change their types",
    "Explore variable naming conventions and best practices",
    "Practice using variables in various programming scenarios"
  ],
  "keyTopics": ["variables", "assignment", "naming conventions", "data types"],
  "difficulty": 1,
  "lessons": [
    {
      "id": "lesson-1-introduction-to-variables",
      "title": "Introduction to Variables",
      "type": "concept",
      "content": {
        "explanation": "Variables are used to store data in a program. In Python, variables are created when you assign a value to them. They do not require explicit declaration of type. For example, `x = 5` assigns the integer value 5 to the variable `x`. Variables make programs dynamic and reusable by allowing values to change during execution.",
        "keyPoints": [
          "Variables store data values in a program.",
          "In Python, variables are dynamically typed.",
          "Use meaningful names for variables to enhance code readability.",
          "Variable names must follow specific naming conventions."
        ],
        "codeExamples": [
          {
            "title": "Basic Variable Assignment",
            "code": "# Assigning values to variables\nname = \"Alice\"\nage = 25\nis_student = True\n\n# Printing the variables\nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"Is Student:\", is_student)",
            "explanation": "This example demonstrates how to assign values of different types (string, integer, boolean) to variables and print their values.",
            "mermaid_diagram": "flowchart TD\n    Start[\"Start\"] --> AssignName[\"Assign 'Alice' to variable 'name'\"]\n    AssignName --> AssignAge[\"Assign 25 to variable 'age'\"]\n    AssignAge --> AssignBool[\"Assign True to variable 'is_student'\"]\n    AssignBool --> PrintVars[\"Print all variable values\"]\n    PrintVars --> End[\"End\"]"
          },
          {
            "title": "Changing Variable Values",
            "code": "# Initial assignment\nx = 10\nprint(\"Initial value of x:\", x)\n\n# Reassigning a new value\nx = \"Python\"\nprint(\"Updated value of x:\", x)",
            "explanation": "This example shows that Python allows reassigning variables with a value of a different type.",
            "mermaid_diagram": "flowchart TD\n    Start[\"Start\"] --> AssignInt[\"Assign 10 to variable 'x'\"]\n    AssignInt --> PrintInt[\"Print initial value of 'x'\"]\n    PrintInt --> AssignStr[\"Assign 'Python' to variable 'x'\"]\n    AssignStr --> PrintStr[\"Print updated value of 'x'\"]\n    PrintStr --> End[\"End\"]"
          }
        ],
        "practiceHints": [
          "Start with simple assignments using integers, strings, or booleans.",
          "Experiment with reassigning variables to understand dynamic typing.",
          "Avoid overwriting built-in Python keywords with variable names."
        ],
        "commonMistakes": [
          "Using invalid characters in variable names.",
          "Overwriting important built-in keywords like `print` or `list`.",
          "Not initializing variables before using them."
        ],
        "bestPractices": [
          "Use descriptive names for variables to improve code readability.",
          "Follow Python's PEP 8 naming conventions (e.g., use lowercase with underscores for variables).",
          "Avoid using single-character names unless in specific contexts (e.g., loops)."
        ]
      },
      "learningObjectives": [
        "Define and use variables in Python.",
        "Understand dynamic typing in Python.",
        "Learn common mistakes and best practices when working with variables."
      ],
      "order": 1
    },
    {
      "id": "lesson-2-variable-mcq",
      "title": "Assess Your Understanding of Variables",
      "type": "mcq",
      "content": {
        "questions": [
          {
            "id": "mcq-1",
            "question": "Which of the following is a valid variable name in Python?",
            "options": [
              { "id": "a", "text": "_variable1", "isCorrect": true },
              { "id": "b", "text": "$variable", "isCorrect": false },
              { "id": "c", "text": "-variable", "isCorrect": false },
              { "id": "d", "text": "@var", "isCorrect": false }
            ],
            "explanation": "_variable1 is valid because it follows Python's variable naming rules. Variable names cannot start with special characters like $, -, or @.",
            "difficulty": 1
          },
          {
            "id": "mcq-2",
            "question": "What will happen if you try to print a variable that has not been initialized?",
            "options": [
              {
                "id": "a",
                "text": "It will print 'None'.",
                "isCorrect": false
              },
              {
                "id": "b",
                "text": "It will throw a NameError.",
                "isCorrect": true
              },
              {
                "id": "c",
                "text": "It will print an empty string.",
                "isCorrect": false
              },
              {
                "id": "d",
                "text": "It will terminate the program silently.",
                "isCorrect": false
              }
            ],
            "explanation": "\"NameError\" occurs when you try to use a variable that hasn't been defined.",
            "difficulty": 1
          }
        ]
      },
      "learningObjectives": [
        "Test knowledge of variable naming rules.",
        "Understand common errors when working with uninitialized variables."
      ],
      "order": 2
    },
    {
      "id": "lesson-3-code-rearranging-variables",
      "title": "Rearrange Code Blocks: Working with Variables",
      "type": "codeblock_rearranging",
      "content": {
        "questions": [
          {
            "id": ":rearranging-1",
            "_scenario ": "",
            "_scenario_2": "scenario text"
          }
        ]
      }
    }
  ]
}
